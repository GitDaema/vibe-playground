import React, { useEffect, useState, useCallback } from "react";
import GraphCanvas from "./GraphCanvas";
import RuleEditor from "./RuleEditor";
import { PreviewPanel } from "./PreviewPanel";
import { PuzzleProvider, usePuzzle } from "../core/PuzzleContext";
import { Graph } from "../graph/model";
import { parseAuthoringCnl, AuthorCnlError } from "../graph/author.cnl";
import SharePanel from "./components/SharePanel";
import { decodePuzzle } from "../codec/shareCode";
import type { StepResult } from "../graph/rule-engine/RuleEngine";

const authorExampleKeyLock = `?∏Îìú A, B, C, DÎ•?ÎßåÎì†??
A?êÏÑú BÎ°?Í∞ÑÏÑ†???áÎäî??
B?êÏÑú CÎ°?Í∞ÑÏÑ†???áÎäî??
C?êÏÑú DÎ°?Í∞ÑÏÑ†???áÎäî??
B?íC??'?¥Ïá†'Í∞Ä ?ÑÏöî?òÎã§.
B??'?¥Ïá†'Í∞Ä ?àÎã§.
?úÏûë?Ä A, Î™©Ìëú??D.`;
const authorExampleBfs = `?∏Îìú A, B, C, D, EÎ•?ÎßåÎì†??
A?êÏÑú BÎ°?Í∞ÑÏÑ†???áÎäî??
A?êÏÑú CÎ°?Í∞ÑÏÑ†???áÎäî??
B?êÏÑú DÎ°?Í∞ÑÏÑ†???áÎäî??
C?êÏÑú EÎ°?Í∞ÑÏÑ†???áÎäî??
D?êÏÑú EÎ°?Í∞ÑÏÑ†???áÎäî??
?úÏûë?Ä A, Î™©Ìëú??E.`;

const PlaygroundContent: React.FC = () => {
  const {
    graph,
    setGraph,
    puzzleState,
    stepSimulation,
    resetSimulation,
    runSimulation,
    parsingErrors,
    validationErrors,
    simulationHistory,
    feedbackMessage,
    setFeedbackMessage,
    isRunning,
    stopSimulation,
  } = usePuzzle();

  const [mainTab, setMainTab] = useState<'create' | 'solve'>('create');
  const [authorCnl, setAuthorCnl] = useState(authorExampleKeyLock);
  const [solveTab, setSolveTab] = useState<'rules' | 'history' | 'share'>('rules');
  const [authorErrors, setAuthorErrors] = useState<AuthorCnlError[]>([]);

  useEffect(() => {
    const hash = window.location.hash.slice(1);
    if (hash) {
      try {
        const decoded = decodePuzzle(hash);
        const newGraph = new Graph(
          decoded.graph.nodes,
          decoded.graph.edges,
          decoded.graph.startNodeId,
          decoded.graph.goalNodeId
        );
        setGraph(newGraph);
        resetSimulation();
        setMainTab('solve');
        setFeedbackMessage(`URLÎ°úÎ????ºÏ¶ê??Î∂àÎü¨?îÏäµ?àÎã§!`);
      } catch (error: any) {
        setFeedbackMessage(`?ºÏ¶ê Î°úÎìú ?§Ìå®: ${error.message}`);
        console.error(error);
      }
    }
  }, [setGraph, resetSimulation, setFeedbackMessage]);

  const handleCreateGraph = useCallback(() => {
    const { graph: newGraph, errors } = parseAuthoringCnl(authorCnl);
    setAuthorErrors(errors);
    if (errors.length === 0) {
      setGraph(newGraph);
    }
  }, [authorCnl, setGraph]);

  const hasSolveErrors = parsingErrors.length > 0 || validationErrors.length > 0;

  return (
    <div className="bg-gray-50 min-h-screen">
      <header className="w-full sticky top-0 z-10 bg-gray-50/80 backdrop-blur-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center py-3">
            <h1 className="text-xl font-bold text-gray-800">Vibe Playground</h1>
          </div>
          <div>
            <TabButton name="create" current={mainTab} set={setMainTab}>1. ?ºÏ¶ê ÎßåÎì§Í∏?/TabButton>
            <TabButton name="solve" current={mainTab} set={setMainTab}>2. ?ºÏ¶ê ?ÄÍ∏?/TabButton>
          </div>
        </div>
      </header>

      <main className="w-full py-6">
        <div className="max-w-7xl mx-auto px-4 grid grid-cols-1 lg:grid-cols-[1fr_400px] gap-6">
          <div className="relative rounded-2xl shadow-sm border border-gray-200 p-4 bg-white/70 backdrop-blur-sm min-h-[640px]">
            <GraphCanvas
              graph={graph}
              entityPosition={puzzleState?.entity.at}
              goalNodeId={graph.goalNodeId}
              inventory={puzzleState?.entity.inventory}
              nodeTags={puzzleState?.nodes}
            />
            <div className="absolute bottom-2 right-3 text-xs text-gray-500 bg-white/50 backdrop-blur-sm p-1 rounded">
              <span className="mr-4">?îë ?ÑÏù¥??/span>
              <span>?îí ?†Í∏¥ Í∞ÑÏÑ†</span>
            </div>
          </div>

          <div className="sticky top-28 flex flex-col space-y-4">
            {mainTab === 'create' ? (
              <AuthoringPanel
                cnl={authorCnl}
                setCnl={setAuthorCnl}
                errors={authorErrors}
                onCreate={handleCreateGraph}
              />
            ) : (
              <div className="rounded-2xl border border-gray-200 bg-white p-4 flex-grow">
                {/* Solve-side tabs to avoid vertical stacking and nested scrollbars */}
                <div className="flex items-center gap-2 mb-4">
                  <SolveTabButton current={solveTab} name="rules" onClick={() => setSolveTab('rules')}>Í∑úÏπô</SolveTabButton>
                  <SolveTabButton current={solveTab} name="history" onClick={() => setSolveTab('history')}>Í∏∞Î°ù</SolveTabButton>
                  <SolveTabButton current={solveTab} name="share" onClick={() => setSolveTab('share')}>Í≥µÏú†</SolveTabButton>
                </div>
                {solveTab === 'rules' && (
                  <>
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">?ºÏ¶ê ?ÄÍ∏?/h3>
                    <SolvingPanel
                      hasErrors={hasSolveErrors}
                      step={stepSimulation}
                      run={runSimulation}
                      reset={resetSimulation}
                      puzzleState={puzzleState}
                      goalNodeId={graph.goalNodeId}
                    />
                  </>
                )}
                {solveTab === 'history' && (
                  <>
                    {/* Controls available also in History tab */}
                    <div className="mb-4 grid grid-cols-3 gap-2">
                      <button
                        className="h-9 px-4 rounded-lg font-medium bg-gray-100 hover:bg-gray-200 text-gray-700 disabled:opacity-50"
                        onClick={() => stepSimulation()}
                        disabled={isRunning || hasSolveErrors || !puzzleState || puzzleState.entity.at === graph.goalNodeId}
                      >
                        Step
                      </button>
                      <button
                        className={`h-9 px-4 rounded-lg font-medium text-white transition disabled:opacity-50 ${isRunning ? 'bg-red-500 hover:bg-red-600' : 'bg-indigo-500 hover:bg-indigo-600'}`}
                        onClick={() => (isRunning ? stopSimulation() : runSimulation())}
                        disabled={isRunning ? false : (hasSolveErrors || !puzzleState || puzzleState.entity.at === graph.goalNodeId)}
                      >
                        {isRunning ? 'Stop' : 'Run'}
                      </button>
                      <button
                        className="h-9 px-4 rounded-lg font-medium bg-gray-100 hover:bg-gray-200 text-gray-700 disabled:opacity-50"
                        onClick={resetSimulation}
                        disabled={!puzzleState}
                      >
                        Reset
                      </button>
                    </div>
                    {/* Side-by-side: RuleEditor | ActionLog */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <RuleEditor />
                      </div>
                      <div>
                        <ActionLog history={simulationHistory} feedback={feedbackMessage} />
                      </div>
                    </div>
                  </>
                )}
                {solveTab === 'share' && (
                  <SharePanel />
                )}
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

const TabButton: React.FC<{name: string, current: string, set: (tab: any) => void, children: React.ReactNode}> = ({name, current, set, children}) => (
  <button
    onClick={() => set(name)}
    className={`px-4 py-2 -mb-px border-b-2 font-medium text-sm ${current === name ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}>
    {children}
  </button>
);

const AuthoringPanel: React.FC<{cnl: string, setCnl: (c: string) => void, errors: AuthorCnlError[], onCreate: () => void}> = ({cnl, setCnl, errors, onCreate}) => (
  <div className="rounded-2xl border border-gray-200 bg-white p-4 space-y-4">
    <h3 className="text-lg font-semibold text-gray-800">?ºÏ¶ê ÎßåÎì§Í∏?(CNL)</h3>
    <div className="grid grid-cols-2 gap-2">
      <button className="h-9 px-4 rounded-lg font-medium text-xs bg-gray-100 hover:bg-gray-200 text-gray-700" onClick={() => setCnl(authorExampleKeyLock)}>?¥Ïá†-?êÎ¨º???àÏãú</button>
      <button className="h-9 px-4 rounded-lg font-medium text-xs bg-gray-100 hover:bg-gray-200 text-gray-700" onClick={() => setCnl(authorExampleBfs)}>?åÍ≥†Î¶¨Ï¶ò ?àÏãú</button>
    </div>
    <textarea
      className="w-full min-h-[200px] p-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-400 bg-white/80 font-mono text-sm resize-y"
      value={cnl}
      onChange={(e) => setCnl(e.target.value)}
      placeholder="?? ?∏Îìú A, B ?ùÏÑ±..."
    />
    <button className="h-9 px-4 rounded-lg font-medium bg-indigo-500 text-white hover:bg-indigo-600 transition w-full" onClick={onCreate}>Í∑∏Îûò???ùÏÑ±</button>
    {errors.length > 0 && (
      <div className="p-3 bg-red-50 rounded-lg text-sm text-red-700">
        <h4 className="font-bold mb-1">?§Î•ò</h4>
        <ul className="list-disc list-inside">{errors.map((e, i) => <li key={i}>{e.message}</li>)}</ul>
      </div>
    )}
  </div>
);

const SolvingPanel: React.FC<{

  hasErrors: boolean;

  step: () => void;

  run: () => void;

  reset: () => void;

  puzzleState: any;

  goalNodeId?: string;

}> = ({hasErrors, step, run, reset, puzzleState, goalNodeId}) => {

  const { setCnl, isRunning, stopSimulation } = usePuzzle();



        const bfsExampleCnl = `?ÑÏßÅ Î∞©Î¨∏?òÏ? ?äÏïò?§Î©¥ Î∞©Î¨∏ Ï≤òÎ¶¨?òÍ≥† ?¥ÏõÉ???êÏóê Ï∂îÍ??úÎã§\n?êÏóê???§Ïùå ?∏ÎìúÎ•?Í∫ºÎÇ∏??;



        const dfsExampleCnl = `?ÑÏßÅ Î∞©Î¨∏?òÏ? ?äÏïò?§Î©¥ Î∞©Î¨∏ Ï≤òÎ¶¨?òÍ≥† ?¥ÏõÉ???§ÌÉù??Ï∂îÍ??úÎã§\n?§ÌÉù?êÏÑú ?§Ïùå ?∏ÎìúÎ•?Î∫Ä??;



        const keyLockSolutionCnl = `B??Ï≤òÏùå ?ÑÏ∞©?àÎã§Î©?Î∞©Î¨∏ Ï≤òÎ¶¨?òÍ≥† ?¥Ïá†Î•?Ï§çÎäî??n?¥Ïá†Í∞Ä ?àÍ≥† B???ÑÏ∞©?àÎã§Î©?CÎ°??¥Îèô?úÎã§\nA???ÑÏ∞©?àÎã§Î©?BÎ°??¥Îèô?úÎã§\nC???ÑÏ∞©?àÎã§Î©?DÎ°??¥Îèô?úÎã§`;



  return (

    <div className="space-y-4">

      <div className="grid grid-cols-3 gap-2">

        <button
          className="h-9 px-4 rounded-lg font-medium bg-gray-100 hover:bg-gray-200 text-gray-700 disabled:opacity-50"
          onClick={() => step()}
          disabled={isRunning || hasErrors || !puzzleState || puzzleState.entity.at === goalNodeId}
        >
          Step
        </button>

        <button
          className={`h-9 px-4 rounded-lg font-medium text-white transition disabled:opacity-50 ${isRunning ? 'bg-red-500 hover:bg-red-600' : 'bg-indigo-500 hover:bg-indigo-600'}`}
          onClick={() => (isRunning ? stopSimulation() : run())}
          disabled={isRunning ? false : (hasErrors || !puzzleState || puzzleState.entity.at === goalNodeId)}
        >
          {isRunning ? 'Stop' : 'Run'}
        </button>

        <button className="h-9 px-4 rounded-lg font-medium bg-gray-100 hover:bg-gray-200 text-gray-700 disabled:opacity-50" onClick={reset} disabled={!puzzleState}>Reset</button>

      </div>

      <div className="grid grid-cols-3 gap-2">

        <button className="h-9 px-4 rounded-lg font-medium text-xs bg-gray-100 hover:bg-gray-200 text-gray-700" onClick={() => setCnl(keyLockSolutionCnl)}>?¥Ïá†-?êÎ¨º???àÏãú</button>

        <button className="h-9 px-4 rounded-lg font-medium text-xs bg-gray-100 hover:bg-gray-200 text-gray-700" onClick={() => setCnl(bfsExampleCnl)}>BFS ?àÏãú</button>

        <button className="h-9 px-4 rounded-lg font-medium text-xs bg-gray-100 hover:bg-gray-200 text-gray-700" onClick={() => setCnl(dfsExampleCnl)}>DFS ?àÏãú</button>

      </div>

      <RuleEditor />

      <PreviewPanel />

    </div>

  );

};

const ActionLog: React.FC<{ history: StepResult[]; feedback: string }> = ({ history, feedback }) => {
  const logs = history.map(h => h.log + (h.isFinished ? ' (Goal Reached!)' : ''));
  if (feedback) logs.push(feedback);

  return (
    <div className="p-3 border rounded-lg bg-gray-50 text-sm">
      <h3 className="font-semibold text-gray-700 mb-2">?§Ìñâ Í∏∞Î°ù</h3>
      {logs.length === 0 ? (
        <p className="text-gray-400">?úÎ??àÏù¥?òÏùÑ ?úÏûë?òÏó¨ ?§Ìñâ Í∏∞Î°ù???ïÏù∏?òÏÑ∏??</p>
      ) : (
        <ul className="space-y-1">
          {logs.map((line, i) => (
            <li key={i} className="font-mono text-xs">{line}</li>
          ))}
        </ul>
      )}
    </div>
  );
};

const SolveTabButton: React.FC<{ current: string; name: 'rules' | 'history' | 'share'; onClick: () => void; children: React.ReactNode }>
  = ({ current, name, onClick, children }) => (
  <button
    onClick={onClick}
    className={`px-3 py-1.5 rounded-lg text-sm font-medium border transition
      ${current === name ? 'bg-indigo-50 text-indigo-700 border-indigo-200' : 'bg-white text-gray-600 border-gray-200 hover:bg-gray-50'}`}
  >
    {children}
  </button>
);

export default function Playground() {
  return (
    <PuzzleProvider initialGraph={new Graph()}>
      <PlaygroundContent />
    </PuzzleProvider>
  );
}

